/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-Rotate-Image.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Rotate Image
 #	author : miyako
 #	2022/08/18
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-Rotate-Image.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- Rotate Image
            
			case 1 :
				Rotate_image(params);
				break;
        }

	}
	catch(...)
	{

	}
}

#pragma mark -

static void getFormat(PA_PluginParameters params, short index, std::string& format){
    
    format = ".png";
    
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT t;
    t.fromParamAtIndex(pParams, index);
    CUTF8String _format;
    t.copyUTF8String(&_format);
    
    if(_format.length() != 0) {
        format = (const char *)_format.c_str();
        if(format.at(0) != ',') {
            format.insert(0, 1, ',');
        }
    }
}

static void getMat(PA_PluginParameters params, short index, int flags, cv::Mat& img){
    
    PA_Handle h = PA_GetBlobHandleParameter(params, index);
    
    if(h != NULL) {
        
        void *p = PA_LockHandle(h);
        PA_long32 len = PA_GetHandleSize(h);

        cv::Mat raw(1, len, CV_8UC1, p);
        
        img = imdecode(raw, flags, NULL);
                
        PA_UnlockHandle(h);
    }
}

static void Rotate_image(PA_PluginParameters params) {
        
    PA_ObjectRef object = PA_CreateObject();
    
    ob_set_b(object, L"success", false);
    
    auto start = std::chrono::steady_clock::now();
    
    int degree = PA_GetLongParameter(params, 2);
    
    std::string format;
    getFormat(params, 3, format);
    
    cv::Mat src;
    
    getMat(params, 1, cv::IMREAD_UNCHANGED, src);
    
    if (src.data != NULL)
    {
        cv::Mat dst;
        
        switch (degree) {
            case 0:
                dst = src;
                break;
            case 90:
                cv::rotate(src, dst, cv::ROTATE_90_CLOCKWISE);
                break;
            case 180:
                cv::rotate(src, dst, cv::ROTATE_180);
                break;
            case 270:
                cv::rotate(src, dst, cv::ROTATE_90_COUNTERCLOCKWISE);
                break;
                
            default:
            {
                
                //warpaffine not working as expected...

            }
                break;
        }
        
        if (dst.data != NULL)
        {
            std::vector<uchar> buf;
            if(imencode(format.c_str(), dst, buf)) {
                PA_Picture straight = PA_CreatePicture(&buf[0], (PA_long32)buf.size());
                auto end = std::chrono::steady_clock::now();
                double count = std::chrono::duration<double>(end - start).count();
                ob_set_p(object, L"image", straight);
                ob_set_b(object, L"success", true);
                ob_set_n(object, L"time", count);
            }
            
        }
        
    }
    
    PA_ReturnObject(params, object);
}
