/* --------------------------------------------------------------------------------
 #
 #	4DPlugin-Rotate-Image.h
 #	source generated by 4D Plugin Wizard
 #	Project : Rotate Image
 #	author : miyako
 #	2022/08/18
 #  
 # --------------------------------------------------------------------------------*/

#ifndef PLUGIN_ROTATE_IMAGE_H
#define PLUGIN_ROTATE_IMAGE_H

#include "4DPluginAPI.h"

#include "4DPlugin-JSON.h"

#include "C_TEXT.h"

#include <iostream>
#include <cmath>
#include <utility>

#if VERSIONMAC
#include "TargetConditionals.h"
#if TARGET_CPU_ARM64
#include "arm/opencv4/opencv2/core.hpp"
#include "arm/opencv4/opencv2/imgcodecs.hpp"
#include "arm/opencv4/opencv2/imgcodecs/macosx.h"
#include "arm/opencv4/opencv2/objdetect.hpp"
#include "arm/opencv4/opencv2/highgui.hpp"
#include "arm/opencv4/opencv2/imgproc.hpp"
#else
#include "intel/opencv4/opencv2/core.hpp"
#include "intel/opencv4/opencv2/imgcodecs.hpp"
#include "intel/opencv4/opencv2/imgcodecs/macosx.h"
#include "intel/opencv4/opencv2/objdetect.hpp"
#include "intel/opencv4/opencv2/highgui.hpp"
#include "intel/opencv4/opencv2/imgproc.hpp"
#endif
#else
#include "opencv2/core.hpp"
#include "opencv2/imgcodecs.hpp"
#include "opencv2/objdetect.hpp"
#include "opencv2/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#ifndef max
#define max(a,b) (((a) > (b)) ? (a) : (b))
#endif
#ifndef min
#define min(a,b) (((a) < (b)) ? (a) : (b))
#endif
#endif

#if VERSIONMAC
#import <Accelerate/Accelerate.h>
#import <AVFoundation/AVFoundation.h>
#import <ImageIO/ImageIO.h>
#else
#include <shlwapi.h>
#include <gdiplus.h>
#endif

#pragma mark -

static void Rotate_image(PA_PluginParameters params);

static void ImageTransform(const cv::Mat &src, const cv::Mat &trans_mat, cv::Mat &dest);
static cv::Mat CoordTransform(const cv::Mat &inv_mat, const cv::Mat &pos);
static cv::Mat CreateTransMat(double angle, std::pair<int, int> &pivot);

static void getMat(PA_PluginParameters params, short index, int flags, cv::Mat& img);
static void getFormat(PA_PluginParameters params, short index, std::string& format);

#endif /* PLUGIN_ROTATE_IMAGE_H */
